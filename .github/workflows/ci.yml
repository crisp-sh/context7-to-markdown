name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: ["*"]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent hanging jobs
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: false  # Don't cancel all jobs if one fails
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Display Python version
        id: display-py-version
        run: |
          python --version
          python -m pip --version

      - name: Upgrade pip
        id: upgrade-pip
        run: |
          python -m pip install --upgrade pip
          python -m pip --version

      - name: Install hatch
        id: install-hatch
        run: |
          pip install --verbose hatch
          hatch --version

      - name: Create hatch environment
        id: create-hatch-env
        run: |
          hatch env create
          hatch env show

      - name: Install project dependencies
        id: install-project-deps
        run: |
          echo "=== Current environment packages ==="
          hatch run pip list
          echo "=== Installing project in editable mode ==="
          hatch run pip install -e . --verbose || (echo "Failed to install project" && hatch run pip install -e . --verbose --no-deps && exit 1)

      - name: Install dev tools
        id: install-dev-tools
        run: |
          echo "=== Installing development tools ==="
          hatch run pip install --verbose black isort bandit safety || (echo "Failed to install dev tools" && exit 1)

      # ---------------- Code-quality gates ----------------
      - name: Lint (ruff)
        id: lint-ruff
        continue-on-error: true
        run: |
          if hatch run ruff check c2md; then
            echo "ruff_result=success" >> $GITHUB_ENV
          else
            echo "ruff_result=failure" >> $GITHUB_ENV
            echo "::warning::Ruff linting check failed"
          fi

      - name: Style check (black)
        id: black-check
        continue-on-error: true
        run: |
          if hatch run black --check .; then
            echo "black_result=success" >> $GITHUB_ENV
          else
            echo "black_result=failure" >> $GITHUB_ENV
            echo "::warning::Black formatting check failed"
          fi

      - name: Import order check (isort)
        id: isort-check
        continue-on-error: true
        run: |
          if hatch run isort --check-only .; then
            echo "isort_result=success" >> $GITHUB_ENV
          else
            echo "isort_result=failure" >> $GITHUB_ENV
            echo "::warning::isort import order check failed"
          fi

      - name: Security scan (bandit)
        id: bandit-check
        continue-on-error: true
        run: |
          if hatch run bandit -r c2md; then
            echo "bandit_result=success" >> $GITHUB_ENV
          else
            echo "bandit_result=failure" >> $GITHUB_ENV
            echo "::warning::Bandit security scan found issues"
          fi

      - name: Dependency vulnerability scan (safety)
        id: hatch-dep-check
        continue-on-error: true
        run: |
          if hatch run safety scan --detailed-output; then
            echo "safety_result=success" >> $GITHUB_ENV
          else
            echo "safety_result=failure" >> $GITHUB_ENV
            echo "::warning::Safety scan encountered an issue"
          fi

      # ---------------- Tests & coverage ----------------
      - name: Debug test environment
        id: debug-test-env
        run: |
          echo "=== Python executable ==="
          hatch run which python
          echo "=== Python version ==="
          hatch run python --version
          echo "=== Installed packages ==="
          hatch run pip list
          echo "=== pytest version ==="
          hatch run pytest --version || echo "pytest not found"

      - name: Run tests with coverage
        id: test-coverage
        continue-on-error: true
        run: |
          if hatch run pytest --cov=c2md --cov-report=xml -v --tb=short; then
            echo "test_result=success" >> $GITHUB_ENV
          else
            echo "test_result=failure" >> $GITHUB_ENV
            echo "::warning::Tests failed with exit code $?"
          fi

      - name: Upload coverage to Codecov
        id: upload-codecov
        continue-on-error: true
        uses: codecov/codecov-action@v5
        with:
          file: coverage.xml
          flags: python-${{ matrix.python-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
        if: ${{ env.CODECOV_TOKEN != '' && steps.test-coverage.outcome == 'success' }}

      - name: Persist coverage artifact
        id: persist-coverage
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
        if: ${{ steps.test-coverage.outcome == 'success' }}

      # ---------------- Summary ----------------
      - name: Job Summary
        if: always()
        run: |
          echo "## CI Results for Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Setup Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Checkout code: ${{ steps.checkout.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Set up Python: ${{ steps.setup-py.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Display Python version: ${{ steps.display-py-version.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Upgrade pip: ${{ steps.upgrade-pip.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Installation Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Install hatch: ${{ steps.install-hatch.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Create hatch environment: ${{ steps.create-hatch-env.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Install project dependencies: ${{ steps.install-project-deps.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Install dev tools: ${{ steps.install-dev-tools.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Code Quality Checks:" >> $GITHUB_STEP_SUMMARY
          echo "- Ruff linting: ${{ env.ruff_result == 'failure' && '⚠️ Failed (non-blocking)' || env.ruff_result == 'success' && '✅ Passed' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Black formatting: ${{ env.black_result == 'failure' && '⚠️ Failed (non-blocking)' || env.black_result == 'success' && '✅ Passed' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- isort import order: ${{ env.isort_result == 'failure' && '⚠️ Failed (non-blocking)' || env.isort_result == 'success' && '✅ Passed' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Bandit security scan: ${{ env.bandit_result == 'failure' && '⚠️ Failed (non-blocking)' || env.bandit_result == 'success' && '✅ Passed' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Safety dependency scan: ${{ env.safety_result == 'failure' && '⚠️ Failed (non-blocking)' || env.safety_result == 'success' && '✅ Passed' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Testing:" >> $GITHUB_STEP_SUMMARY
          echo "- Debug test environment: ${{ steps.debug-test-env.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test execution: ${{ env.test_result == 'failure' && '⚠️ Failed (non-blocking)' || env.test_result == 'success' && '✅ Passed' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage upload: ${{ steps.upload-codecov.outcome == 'success' && '✅ Passed' || steps.upload-codecov.outcome == 'failure' && '⚠️ Failed (non-blocking)' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Persist coverage artifact: ${{ steps.persist-coverage.outcome == 'success' && '✅ Passed' || steps.persist-coverage.outcome == 'failure' && '⚠️ Failed (non-blocking)' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Legend:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed (blocking)" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Failed (non-blocking)" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Non-blocking failures should be addressed but don't prevent the CI from passing." >> $GITHUB_STEP_SUMMARY